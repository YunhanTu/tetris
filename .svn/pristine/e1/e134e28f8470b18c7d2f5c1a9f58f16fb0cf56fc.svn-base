/*
 * TCSS 305 - Tetris
 * Part-A
 */

package view;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.RenderingHints;
import java.awt.geom.Rectangle2D;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.util.ArrayList;
import java.util.List;
import java.util.Observable;
import java.util.Observer;
import javax.swing.JPanel;
import model.Block;
import model.Point;
import model.TetrisPiece;

/**
 * This class is used to show the next piece  and info panel.
 * 
 * @author Yunhan Tu
 * @version 12/1
 *
 */
public class NextPiece extends JPanel implements Observer, PropertyChangeListener {

    /** 
     *  initial timer.
      */
    public static final int MY_TIMER = 4;
    
    /**  
     * the Serial Version UID.
     */
    private static final long serialVersionUID = 1L;

    /**
     * number 10. 
     */
    private static final int TEN = 10;

    /**
     * number 20. 
     */
    private static final int TWENTY = 20;
    
    /** 
     * the square size. 
     */
    private static final int SQUARE_SIZE = 20;

    /** 
     * the number 220. 
     */
    private static final int KEY_LOCATION = 175;

    /** 
     * the panel width. 
     */
    private static final int PANEL_WIDTH = 100;
    /**
     * the next piece panel.
     */
    private final Rectangle2D myNextPiecePanel = new Rectangle2D.Double(0, 0, 115, 100);
    
    /** 
     * the next piece.
     */
    private TetrisPiece myTetrisPiece;

    /**
     * This is the default constructor for NextPiecePanel.
     */
    public NextPiece() {
        super();
        setPreferredSize(new Dimension(PANEL_WIDTH, PANEL_WIDTH));
        setBackground(Color.WHITE);
    
    }

    @Override
    public void paintComponent(final Graphics theGraphics) {
        super.paintComponent(theGraphics);
        final Graphics2D g2D = (Graphics2D) theGraphics;

        g2D.setRenderingHint(RenderingHints.KEY_ANTIALIASING,
                             RenderingHints.VALUE_ANTIALIAS_ON);
     
        g2D.setPaint(Color.GRAY);
        g2D.fill(myNextPiecePanel);

        if (null != myTetrisPiece) {
            final Point[] block = myTetrisPiece.getPoints();
            int widthPosition;
            int heightPosition;
            final int howRounded = 5;
            for (final Point p : block) {
                final int threethrty = 330; 
                final int threetwenty = 320;
                final int onefive = 15;
                final int twotwo = 22;
                final int onetwo = 12;
                final int three = 3;
                final int four = 4;               
                if (myTetrisPiece.getWidth() == four) {
                    widthPosition = onefive;
                    heightPosition = threetwenty;
                } else if (myTetrisPiece.getWidth() == three 
                                &&  myTetrisPiece.getBlock() != Block.O) {
                    widthPosition = twotwo;
                    heightPosition = threethrty;
                } else  {
                    widthPosition = onetwo;
                    heightPosition = threethrty;
                }
                final Rectangle2D tetrisBlock =
                                new Rectangle2D.Double(p.x() * SQUARE_SIZE + widthPosition,
                                                       (SQUARE_SIZE - p.y()) * SQUARE_SIZE
                                                                          - heightPosition,
                                                       SQUARE_SIZE, SQUARE_SIZE);
                g2D.setPaint(Color.BLACK);
                g2D.fill(tetrisBlock);
                g2D.setPaint(Color.BLACK); 
                g2D.draw(tetrisBlock);
                g2D.drawRoundRect(p.x() * SQUARE_SIZE + widthPosition,
                                  (SQUARE_SIZE - p.y()) * SQUARE_SIZE - heightPosition,
                                 SQUARE_SIZE, SQUARE_SIZE, howRounded, howRounded);            
            }
        }       
        final Rectangle2D textBox = new Rectangle2D.Double(0, 140, 115, 170);
        g2D.setPaint(Color.WHITE);
        g2D.fill(textBox);
        g2D.setPaint(Color.BLACK);
        g2D.draw(textBox);
        final List<String> infoList = new ArrayList<String>();
        infoList.add("Left : A or ¡û");
        infoList.add("Right : D or ¡ú");
        infoList.add("Rotate : W or ¡ü");
        infoList.add("Down : S or ¡ý");
        infoList.add("Drop : Space");   
        for (int i = 0; i < infoList.size(); i++) {
            g2D.drawString(infoList.get(i), TEN, KEY_LOCATION + TWENTY * i);
        }
    }    

    @Override
    public void update(final Observable theObservable, final Object theObject) {
        if (theObject instanceof TetrisPiece) {
            myTetrisPiece = (TetrisPiece) theObject;
            repaint();
        }
    }

    @Override
    public void propertyChange(final PropertyChangeEvent theEvent) {
        
    } 
}